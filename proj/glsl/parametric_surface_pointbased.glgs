#version 150

in vec2 texcoord_gs[];

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

uniform vec3 control_points[16];

/*
vec3 control_points[16] = vec3[](
	vec3(0, 0, 0),
	vec3(0, 1.01, 1),
	vec3(0, 1.08, 2),
	vec3(0, 0, 3),

	vec3(1, 1.2, 0),
	vec3(1, 1.3, 1),
	vec3(1, 1.2, 2),
	vec3(1, 1.1, 3),

	vec3(2, 1.4, 0),
	vec3(2, 1.6, 1),
	vec3(2, 1.1, 2),
	vec3(2, 1.2, 3),

	vec3(3, 0, 0 ),
	vec3(3, 1.3, 1),
	vec3(3, 1.4, 2),
	vec3(3, 0, 3)
);
// vec3 P[4] = {vec3(0.5,0,0),vec3(0.2,0.1,0),vec3(-0.2,0.2,0),vec3(-0.5,0,0)};
vec3 control_points[4] = vec3[](
	vec3(0.5,0,0),
	vec3(0.2,0.1,0),
	vec3(-0.2,0.1,0),
	vec3(-0.5,0,0)
);
vec3 simple_curve[4] = vec3[](
	vec3(1,0,0),
	vec3(0,3,0),
	vec3(-1,1,0),
	vec3(-2,0,0)
);

vec3 plane_patch[16] = vec3[](
	vec3(0, 0, 0),
	vec3(0, 0, 1),
	vec3(0, 0, 2),
	vec3(0, 0, 3),
	
	vec3(1, 0, 0),
	vec3(1, 0, 1),
	vec3(1, 0, 2),
	vec3(1, 0, 3),

	vec3(2, 0, 0),
	vec3(2, 0, 1),
	vec3(2, 0, 2),
	vec3(2, 0, 3),
	
	vec3(3, 0, 0),
	vec3(3, 0, 1),
	vec3(3, 0, 2),
	vec3(3, 0, 3)
);
*/

// t is parameter, parameters are passed here as vertex sttributes
// t -> (0,1)
vec3 evalBezierCurve_decasteljau(vec3 P[4], float t) 
{ 
    // compute first tree vec3s along main segments P1-P2, P2-P3 and P3-P4
    vec3 P12 = (1 - t) * P[0] + t * P[1]; 
    vec3 P23 = (1 - t) * P[1] + t * P[2]; 
    vec3 P34 = (1 - t) * P[2] + t * P[3]; 
    // compute two vec3s along segments P1P2-P2P3 and P2P3-P3P4
    vec3 P1223 = (1 - t) * P12 + t * P23; 
    vec3 P2334 = (1 - t) * P23 + t * P34; 
 
    // finally compute P
    return (1 - t) * P1223 + t * P2334; // P 
} 

// uv parametrized 
// u,v -> (0,1)
vec3 evaluateBezierSurface(vec3 P[16], float u, float v) 
{ 
/*
    vec3 Pu[4]; 
    // compute 4 control vec3s along u direction
    for (int i = 0; i < 4; ++i) { 
       vec3 curveP[4]; 
       curveP[0] = P[i * 4]; 
       curveP[1] = P[i * 4 + 1]; 
       curveP[2] = P[i * 4 + 2]; 
       curveP[2] = P[i * 4 + 3]; 
       Pu[i] = evalBezierCurve_decasteljau(curveP, u); 
    } 
    // compute final position on the surface using v
    return evalBezierCurve_decasteljau(Pu, v); 
*/
	vec3 Pu[4]; 
	vec3 curveP[4]; 
	curveP[0] = P[0];
	curveP[1] = P[1];
	curveP[2] = P[2];
	curveP[3] = P[3];
	Pu[0] = evalBezierCurve_decasteljau(curveP, u); 
	curveP[0] = P[4];
	curveP[1] = P[5];
	curveP[2] = P[6];
	curveP[3] = P[7];
	Pu[1] = evalBezierCurve_decasteljau(curveP, u); 
	curveP[0] = P[8];
	curveP[1] = P[9];
	curveP[2] = P[10];
	curveP[3] = P[11];
	Pu[2] = evalBezierCurve_decasteljau(curveP, u); 
	curveP[0] = P[12];
	curveP[1] = P[13];
	curveP[2] = P[14];
	curveP[3] = P[15];
	Pu[3] = evalBezierCurve_decasteljau(curveP, u); 
	return evalBezierCurve_decasteljau(Pu, v); 
} 

void generate_vertex(in vec2 tcd)
{
	if(tcd.x<0 || tcd.x>1 || tcd.y<0 || tcd.y>1)
		return;

	vec3 interpolated_position = evaluateBezierSurface(control_points,tcd.x,tcd.y);
	vec4 vertex = vec4(interpolated_position,1.0);

	gl_Position  = get_modelview_projection_matrix()*vertex; 
	EmitVertex();
}

void main()
{
	generate_vertex(texcoord_gs[0]);
	EndPrimitive(); 
}
